using System; 
using Server;
using Server.Items;

namespace Server.Mobiles 
{ 
	[CorpseName( " a corpse" )] 
	public class Jason : BaseCreature 
	{ 
		[Constructable] 
		public Jason() : base( AIType.AI_Mage, FightMode.Closest, 10, 1, 0.2, 0.4 ) 
		{ 
			Name = "Jason";
			Body = 400;
            Hue = 33775;

                     

			SetStr( 281, 305 );
			SetDex( 291, 315 );
			SetInt( 226, 350 );

			SetHits( 1000, 1500 );

			SetDamage( 40, 45 );

			SetDamageType( ResistanceType.Physical, 100 );

			SetResistance( ResistanceType.Physical, 95, 100 );
			SetResistance( ResistanceType.Fire, 90, 95 );
			SetResistance( ResistanceType.Cold, 80, 85 );
			SetResistance( ResistanceType.Poison, 90, 95 );
			SetResistance( ResistanceType.Energy, 80, 85 );

			SetSkill( SkillName.EvalInt, 90.2, 100 );
			SetSkill( SkillName.Magery, 95.1, 100 );
			SetSkill( SkillName.Meditation, 90.5, 100 );
			SetSkill( SkillName.MagicResist, 90.5, 100 );
			SetSkill( SkillName.Tactics, 105.1, 110.5 );
			SetSkill( SkillName.Wrestling, 110.1, 114.1 );

			Fame = 0;
			Karma = -10500;

			VirtualArmor = 60;

                        TribalMask helm = new TribalMask();
                        helm.Hue = 2007;
                        helm.Movable = false;
                        AddItem( helm );
                                                

            Shirt shirt = new Shirt();
			shirt.Hue = 1438;
			shirt.Movable = false;
			AddItem( shirt );


			LeatherGloves gloves = new LeatherGloves();
			gloves.Hue = 1175;
                        gloves.Movable = false;
			AddItem( gloves );

			LongPants legs = new LongPants();
			legs.Hue = 1175;
                        legs.Movable = false;
			AddItem( legs );

			BladeOfCrystalLake weapon = new BladeOfCrystalLake();
			weapon.Movable = false;
			AddItem( weapon );

			Boots boots = new Boots();
			boots.Hue = 1175;
            boots.Movable = false;
			AddItem( boots );

			

		}

		public override bool CanRummageCorpses{ get{ return true; } }
                public override bool BardImmune{ get{ return true; } }
		public override bool AutoDispel{ get{ return true; } }
		public override Poison PoisonImmune{ get{ return Poison.Lethal; } }
		public override bool AlwaysMurderer{ get{ return true; } }

		public override void GenerateLoot()
		{
			AddLoot( LootPack.UltraRich );
			AddLoot( LootPack.Average );
                      { 
                     
			
			  { 
                       if ( 0.50 > Utility.RandomDouble() ) // 0.50 = 55% = chance to drop 
			switch ( Utility.Random( 6 )) //number of alternatives 
			{ 
			// Armors 
			
			
			 
			case 0: AddToBackpack( new BladeOfCrystalLake() ); break;
            case 1: AddToBackpack( new Jack0Lantern4GhoulAddonDeed() ); break;
            case 2: AddToBackpack( new Jack0Lantern3decoAddonDeed() ); break;
		}
}
}

        }           

		public Jason( Serial serial ) : base( serial ) 
		{ 
		} 

		public override void Serialize( GenericWriter writer ) 
		{ 
			base.Serialize( writer ); 
			writer.Write( (int) 0 ); 
		} 

		public override void Deserialize( GenericReader reader ) 
		{ 
			base.Deserialize( reader ); 
			int version = reader.ReadInt(); 
		} 
	} 
}
